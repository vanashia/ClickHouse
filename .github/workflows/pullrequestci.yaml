# generated by praktika

name: PullRequestCI

on:
  pull_request:
    branches: ['master']

# Cancel the previous wf run in PRs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Force the stdout and stderr streams to be unbuffered
  PYTHONUNBUFFERED: 1

jobs:

  config_workflow:
    runs-on: [ci_services]
    needs: []
    name: "Config Workflow"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up env
        run: |
          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output /tmp/praktika/results
          echo "TEMP_DIR=$(readlink -f /tmp/praktika)" >> "$GITHUB_ENV"
          echo "INPUT_DIR=$(readlink -f /tmp/praktika/input)" >> "$GITHUB_ENV"
          echo "OUTPUT_DIR=$(readlink -f /tmp/praktika/output)" >> "$GITHUB_ENV"
          echo "JOB_NAME=Config Workflow" >> "$GITHUB_ENV"
          export PYTHONPATH=$(pwd)
          echo PYTHONPATH=$PYTHONPATH >> "$GITHUB_ENV"
          python3 -m praktika.gh_auth
          echo '''${{ needs.config_workflow.outputs.data }}''' > /tmp/praktika/results/workflow_config_pullrequestci.json
          cat /tmp/praktika/results/workflow_config_pullrequestci.json
          echo "::group::GITHUB ENV"
          env | grep GITHUB ||:
          env | grep -q GITHUB_EVENT_PATH && cat "$GITHUB_EVENT_PATH" ||:
          echo "::endgroup::"
          echo "::group::CI ENV"
          env | grep CI_ ||:
          echo "::endgroup::"
          echo "::group::GH ENV"
          env | grep GH_ ||:
          echo "::endgroup::"
          echo "PRAKTIKA_SETUP_STEP_EXIT_CODE=0" >> "$GITHUB_ENV"

      - name: Pre
        run: |
          set -o pipefail
          python3 -m praktika.runner --pre-run --job-name '''Config Workflow''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/pre_run.log

      - name: Run
        id: run
        run: |
          set -o pipefail
          python3 -m praktika.runner --run --job-name '''Config Workflow''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/run.log

      - name: Post
        if: ${{ !cancelled() }}
        run: |
          set -o pipefail
          python3 -m praktika.runner --post-run --job-name '''Config Workflow''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/post_run.log

  docker_builds:
    runs-on: [ci_services]
    needs: [config_workflow]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'RG9ja2VyIEJ1aWxkcw==') }}
    name: "Docker Builds"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up env
        run: |
          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output /tmp/praktika/results
          echo "TEMP_DIR=$(readlink -f /tmp/praktika)" >> "$GITHUB_ENV"
          echo "INPUT_DIR=$(readlink -f /tmp/praktika/input)" >> "$GITHUB_ENV"
          echo "OUTPUT_DIR=$(readlink -f /tmp/praktika/output)" >> "$GITHUB_ENV"
          echo "JOB_NAME=Docker Builds" >> "$GITHUB_ENV"
          export PYTHONPATH=$(pwd)
          echo PYTHONPATH=$PYTHONPATH >> "$GITHUB_ENV"
          python3 -m praktika.gh_auth
          echo '''${{ needs.config_workflow.outputs.data }}''' > /tmp/praktika/results/workflow_config_pullrequestci.json
          cat /tmp/praktika/results/workflow_config_pullrequestci.json
          echo "::group::GITHUB ENV"
          env | grep GITHUB ||:
          env | grep -q GITHUB_EVENT_PATH && cat "$GITHUB_EVENT_PATH" ||:
          echo "::endgroup::"
          echo "::group::CI ENV"
          env | grep CI_ ||:
          echo "::endgroup::"
          echo "::group::GH ENV"
          env | grep GH_ ||:
          echo "::endgroup::"
          echo "PRAKTIKA_SETUP_STEP_EXIT_CODE=0" >> "$GITHUB_ENV"

      - name: Pre
        run: |
          set -o pipefail
          python3 -m praktika.runner --pre-run --job-name '''Docker Builds''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/pre_run.log

      - name: Run
        id: run
        run: |
          set -o pipefail
          python3 -m praktika.runner --run --job-name '''Docker Builds''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/run.log

      - name: Post
        if: ${{ !cancelled() }}
        run: |
          set -o pipefail
          python3 -m praktika.runner --post-run --job-name '''Docker Builds''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/post_run.log

  style_check:
    runs-on: [ci_services]
    needs: [config_workflow, docker_builds]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'U3R5bGUgQ2hlY2s=') }}
    name: "Style Check"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up env
        run: |
          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output /tmp/praktika/results
          echo "TEMP_DIR=$(readlink -f /tmp/praktika)" >> "$GITHUB_ENV"
          echo "INPUT_DIR=$(readlink -f /tmp/praktika/input)" >> "$GITHUB_ENV"
          echo "OUTPUT_DIR=$(readlink -f /tmp/praktika/output)" >> "$GITHUB_ENV"
          echo "JOB_NAME=Style Check" >> "$GITHUB_ENV"
          export PYTHONPATH=$(pwd)
          echo PYTHONPATH=$PYTHONPATH >> "$GITHUB_ENV"
          python3 -m praktika.gh_auth
          echo '''${{ needs.config_workflow.outputs.data }}''' > /tmp/praktika/results/workflow_config_pullrequestci.json
          cat /tmp/praktika/results/workflow_config_pullrequestci.json
          echo "::group::GITHUB ENV"
          env | grep GITHUB ||:
          env | grep -q GITHUB_EVENT_PATH && cat "$GITHUB_EVENT_PATH" ||:
          echo "::endgroup::"
          echo "::group::CI ENV"
          env | grep CI_ ||:
          echo "::endgroup::"
          echo "::group::GH ENV"
          env | grep GH_ ||:
          echo "::endgroup::"
          echo "PRAKTIKA_SETUP_STEP_EXIT_CODE=0" >> "$GITHUB_ENV"

      - name: Pre
        run: |
          set -o pipefail
          python3 -m praktika.runner --pre-run --job-name '''Style Check''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/pre_run.log

      - name: Run
        id: run
        run: |
          set -o pipefail
          python3 -m praktika.runner --run --job-name '''Style Check''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/run.log

      - name: Post
        if: ${{ !cancelled() }}
        run: |
          set -o pipefail
          python3 -m praktika.runner --post-run --job-name '''Style Check''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/post_run.log

  finish_workflow:
    runs-on: [ci_services]
    needs: [config_workflow, docker_builds, style_check]
    if: ${{ !cancelled() }}
    name: "Finish Workflow"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up env
        run: |
          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output /tmp/praktika/results
          echo "TEMP_DIR=$(readlink -f /tmp/praktika)" >> "$GITHUB_ENV"
          echo "INPUT_DIR=$(readlink -f /tmp/praktika/input)" >> "$GITHUB_ENV"
          echo "OUTPUT_DIR=$(readlink -f /tmp/praktika/output)" >> "$GITHUB_ENV"
          echo "JOB_NAME=Finish Workflow" >> "$GITHUB_ENV"
          export PYTHONPATH=$(pwd)
          echo PYTHONPATH=$PYTHONPATH >> "$GITHUB_ENV"
          python3 -m praktika.gh_auth
          echo '''${{ needs.config_workflow.outputs.data }}''' > /tmp/praktika/results/workflow_config_pullrequestci.json
          cat /tmp/praktika/results/workflow_config_pullrequestci.json
          echo "::group::GITHUB ENV"
          env | grep GITHUB ||:
          env | grep -q GITHUB_EVENT_PATH && cat "$GITHUB_EVENT_PATH" ||:
          echo "::endgroup::"
          echo "::group::CI ENV"
          env | grep CI_ ||:
          echo "::endgroup::"
          echo "::group::GH ENV"
          env | grep GH_ ||:
          echo "::endgroup::"
          echo "PRAKTIKA_SETUP_STEP_EXIT_CODE=0" >> "$GITHUB_ENV"

      - name: Pre
        run: |
          set -o pipefail
          python3 -m praktika.runner --pre-run --job-name '''Finish Workflow''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/pre_run.log

      - name: Run
        id: run
        run: |
          set -o pipefail
          python3 -m praktika.runner --run --job-name '''Finish Workflow''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/run.log

      - name: Post
        if: ${{ !cancelled() }}
        run: |
          set -o pipefail
          python3 -m praktika.runner --post-run --job-name '''Finish Workflow''' --workflow-name "PullRequestCI" 2>&1 | tee /tmp/praktika/post_run.log
